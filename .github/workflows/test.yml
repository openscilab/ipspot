# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches:
      - main
      - dev

  pull_request:
    branches:
      - main
      - dev

env:
  TEST_PYTHON_VERSION: 3.9
  TEST_OS: 'ubuntu-22.04'

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macOS-13]
        python-version: [3.7, 3.8, 3.9, 3.10.5, 3.11.0, 3.12.0, 3.13.0]
    steps:
    - uses: actions/checkout@v2
    # Setup WARP (Ubuntu only)
    - name: Setup WARP
      if: matrix.os == 'ubuntu-22.04'
      uses: ./.github/actions/setup-warp
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Installation
      run: |
        python -m pip install --upgrade pip
        pip install .
    - name: Run1
      run: |
        ipspot --version
    - name: Run2
      run: |
        ipspot --info
    - name: Run3
      run: |
        ipspot
    - name: Run4
      run: |
        ipspot --no-geo --max-retries=5 --retry-delay=3
    - name: Run5
      run: |
        ipspot --timeout=15
    - name: Install dev-requirements
      run: |
        python otherfiles/requirements-splitter.py
        pip install --upgrade --upgrade-strategy=only-if-needed -r test-requirements.txt
    - name: Test with pytest
      run: |
          python -m pytest . --cov=ipspot --cov-report=term --ignore-glob="tests/test_ipv6_*.py" --ignore=tests/test_ipv4_api.py
    - name: Test with pytest (Public APIs + IPv6)
      run: |
          python -m pytest . --cov=ipspot --cov-report=term
      if: matrix.python-version == env.TEST_PYTHON_VERSION && matrix.os == env.TEST_OS
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
      if: matrix.python-version == env.TEST_PYTHON_VERSION && matrix.os == env.TEST_OS
    - name: Version check
      run: |
        python otherfiles/version_check.py
      if: matrix.python-version == env.TEST_PYTHON_VERSION
    - name: Other tests
      run: |
        python -m vulture ipspot/ setup.py --min-confidence 65 --exclude=__init__.py --sort-by-size
        python -m bandit -r ipspot -s B404,B603,B605,B607,B311
        python -m pydocstyle --match-dir=ipspot -v
      if: matrix.python-version == env.TEST_PYTHON_VERSION
